// Add this to your app.js file

// Intersection Observer for fade-in animations
document.addEventListener('DOMContentLoaded', function() {
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
    };

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                observer.unobserve(entry.target); // Stop observing once visible
            }
        });
    }, observerOptions);

    // Observe all sections and cards
    document.querySelectorAll('section, .card').forEach(el => {
        el.classList.add('fade-in');
        observer.observe(el);
    });

    // Smart Header (hides on scroll down, shows on scroll up)
    let lastScroll = 0;
    const header = document.querySelector('.sticky-header');
    
    if (header) {
        window.addEventListener('scroll', () => {
            const currentScroll = window.pageYOffset;
            
            if (currentScroll <= 0) {
                header.classList.remove('header-hidden');
                return;
            }
            
            if (currentScroll > lastScroll && !header.classList.contains('header-hidden')) {
                // Scroll Down
                header.classList.add('header-hidden');
            } else if (currentScroll < lastScroll && header.classList.contains('header-hidden')) {
                // Scroll Up
                header.classList.remove('header-hidden');
            }
            
            lastScroll = currentScroll;
        });
    }

    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // Enhanced Mobile Menu Toggle
    const menuToggle = document.querySelector('.navbar-toggler');
    if (menuToggle) {
        menuToggle.addEventListener('click', function() {
            this.classList.toggle('active');
        });
    }

    // Lazy Loading for Images
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.classList.remove('lazy');
                    observer.unobserve(img);
                }
            });
        });

        document.querySelectorAll('img.lazy').forEach(img => {
            imageObserver.observe(img);
        });
    }

    // Touch-friendly gallery navigation
    const galleryCarousel = document.querySelector('#galleryCarousel');
    if (galleryCarousel) {
        let touchstartX = 0;
        let touchendX = 0;

        galleryCarousel.addEventListener('touchstart', e => {
            touchstartX = e.changedTouches[0].screenX;
        });

        galleryCarousel.addEventListener('touchend', e => {
            touchendX = e.changedTouches[0].screenX;
            handleGestureSwipe();
        });

        function handleGestureSwipe() {
            if (touchendX < touchstartX) {
                // Swipe left
                jQuery('#galleryCarousel').carousel('next');
            }
            if (touchendX > touchstartX) {
                // Swipe right
                jQuery('#galleryCarousel').carousel('prev');
            }
        }
    }

    // Performance optimization for mobile
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Optimize scroll handlers
    const debouncedScroll = debounce(() => {
        // Your scroll-based animations here
    }, 16);

    window.addEventListener('scroll', debouncedScroll);
});